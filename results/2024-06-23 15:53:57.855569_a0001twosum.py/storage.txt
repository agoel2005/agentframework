
```json
{
    "test_cases": [
        {
            "input": {"nums": [], "target": 10},
            "output": None,
            "description": "Tests the function with an empty list.",
            "result": None,
            "worked": True
        },
        {
            "input": {"nums": [5], "target": 10},
            "output": None,
            "description": "Tests the function with a single element list.",
            "result": None,
            "worked": True
        },
        {
            "input": {"nums": [1, 2, 3, 4], "target": 10},
            "output": None,
            "description": "Tests the function with a list that has no valid pair summing to the target.",
            "result": None,
            "worked": True
        },
        {
            "input": {"nums": [1, 2, 3, 4, 3], "target": 6},
            "output": [1, 3],
            "description": "Tests the function with a list that contains multiple pairs summing to the target.",
            "result": [1, 3],
            "worked": True
        },
        {
            "input": {"nums": [3, 3, 4, 5], "target": 6},
            "output": [0, 1],
            "description": "Tests the function with a list that has duplicate elements forming a valid pair.",
            "result": [0, 1],
            "worked": True
        },
        {
            "input": {"nums": [-1, -2, -3, -4], "target": -6},
            "output": [1, 3],
            "description": "Tests the function with a list containing negative numbers.",
            "result": [1, 3],
            "worked": True
        },
        {
            "input": {"nums": [0, 4, 3, 0], "target": 0},
            "output": [0, 3],
            "description": "Tests the function with a list containing zero elements and target as zero.",
            "result": [0, 3],
            "worked": True
        },
        {
            "input": {"nums": [1, 1, 1, 1], "target": 2},
            "output": [0, 1],
            "description": "Tests the function with a list where all elements are the same.",
            "result": [0, 1],
            "worked": True
        },
        {
            "input": {"nums": [i for i in range(1, 10001)], "target": 19999},
            "output": [9998, 9999],
            "description": "Tests the function with a large list containing high values.",
            "result": [9998, 9999],
            "worked": True
        },
        {
            "input": {"nums": [3, 3, 4, 5], "target": 6},
            "output": [0, 1],
            "description": "Tests the function where the complement is the same as the current number.",
            "result": [0, 1],
            "worked": True
        }
    ],
    "code": "# -*- coding: utf-8 -*-

################################################
#
# URL:
# =====
# https://leetcode.com/problems/two-sum/
#
# DESC:
# =====
# Given an array of integers,
# return indices of the two numbers such that they add up to a specific target.
#
# You may assume that each input would have exactly one solution,
# and you may not use the same element twice.
#
# Example:
#
# Given nums = [2, 7, 11, 15], target = 9,
#
# Because nums[0] + nums[1] = 2 + 7 = 9,
# return [0, 1].
################################################

from typing import List


class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        dic = {}
        for index, num in enumerate(nums):
            pair = target - num
            if pair in dic:
                return [dic[pair], index]
            else:
                dic[num] = index
"
}
```
